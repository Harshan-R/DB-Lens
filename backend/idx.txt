require("dotenv").config(); // Add dotenv to load environment variables

const express = require("express");
const cors = require("cors");
const mysql = require("mysql2/promise"); // <-- mysql2 with promise support
const axios = require("axios");

const app = express();
const port = 5000;

app.use(cors());
app.use(express.json());

let pool = null; // We'll initialize pool when user supplies DB details

// 1️⃣ Route to connect to MySQL
app.post("/connect", async (req, res) => {
  const { host, port, user, password, database } = req.body;

  try {
    // Use environment variables instead of parameters from the request
    pool = await mysql.createPool({
      host: process.env.DB_HOST || host, // If env variable exists, use it
      port: process.env.DB_PORT || port, // If env variable exists, use it
      user: process.env.DB_USER || user, // If env variable exists, use it
      password: process.env.DB_PASSWORD || password, // If env variable exists, use it
      database: process.env.DB_NAME || database, // If env variable exists, use it
      waitForConnections: true,
      connectionLimit: 10,
      queueLimit: 0,
    });

    // Simple test connection
    const [rows] = await pool.query("SELECT 1");

    res.json({ success: true, message: "Connected successfully to MySQL!" });
  } catch (err) {
    console.error("Connection failed:", err);
    res.status(400).json({
      success: false,
      message: "Failed to connect to database",
      error: err.message,
    });
  }
});

// 2️⃣ Route to send prompt to LLM and get SQL
app.post("/llm", async (req, res) => {
  const { prompt, schema } = req.body;

  try {
    const ollamaResponse = await axios.post(
      "http://localhost:11434/api/generate",
      {
        model: "phi:2.7b",
        prompt: `Given the following database schema:\n${schema}\n\nConvert the following user request into SQL:\n"${prompt}"`,
        stream: false,
      }
    );

    const generatedSQL = ollamaResponse.data.response.trim();
    res.json({ sql: generatedSQL });
  } catch (err) {
    console.error("LLM error:", err.message);
    res
      .status(500)
      .json({ error: "Failed to get SQL from LLM", details: err.message });
  }
});

// 3️⃣ Route to run SQL query on MySQL
app.post("/query", async (req, res) => {
  const { sql } = req.body;

  if (!pool) {
    return res.status(400).json({ error: "Not connected to DB" });
  }

  try {
    const [rows, fields] = await pool.query(sql);
    res.json({ rows, fields });
  } catch (err) {
    console.error("SQL execution error:", err.message);
    res
      .status(500)
      .json({ error: "SQL execution failed", details: err.message });
  }
});

// 4️⃣ Route to get DB schema (tables + columns)
app.get("/schema", async (req, res) => {
  if (!pool) {
    return res.status(400).json({ error: "Not connected to DB" });
  }

  try {
    // Get all tables in the database
    const [tables] = await pool.query("SHOW TABLES");

    // Get database name dynamically
    const [dbNameResult] = await pool.query("SELECT DATABASE() as db");
    const dbName = dbNameResult[0].db;

    const schemaParts = [];

    for (const row of tables) {
      const tableName = row[`Tables_in_${dbName}`];
      const [columns] = await pool.query(`SHOW COLUMNS FROM \`${tableName}\``);

      const columnDefs = columns
        .map((col) => `${col.Field} ${col.Type}`)
        .join(", ");

      schemaParts.push(`${tableName}(${columnDefs})`);
    }

    const schemaString = schemaParts.join("; ");
    res.json({ schema: schemaString });
  } catch (err) {
    console.error("Schema fetch error:", err.message);
    res
      .status(500)
      .json({ error: "Failed to fetch schema", details: err.message });
  }
});

// Start server
app.listen(port, () => {
  console.log(`✅ DBLens backend (MySQL) running at http://localhost:${port}`);
});
